#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan  1 22:35:10 2025

@author: noahvaillant
"""


import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from matplotlib.animation import FFMpegWriter as w


# =============================================================================
# Parameters and Initial Conditions
# =============================================================================

# number of magnets
n = 25

# magnetic force constant
k = 30 + n

# length of pendulum
l = 20 + 2*n

# ground to rest position of mass
d = 0.1

# friction on pendulum

f = 0.02

# gravity
g = 9.81

# mass
m = 10

# initial conditions

x0, y0 = 4, 3
xd0, yd0 = 0, 0

# z0 as detirmined by x0 and y0
z0 = d + l - np.sqrt(l**2 - x0**2 - y0**2)

# simulation time
start = 0
end = 100


# =============================================================================
# Creation of Magnets
# =============================================================================


class Magnet():

    '''

    pos: position (float, float)
    color: color in rgb (int, int, int)

    '''

    def __init__(self, pos, color):
        self.pos = pos
        self.color = color

# creates evenly spaced magnets around the origin with varying color
def n_mags(n: int) -> list[Magnet]:
    mags = []
    delta = 2*np.pi/n
    r = n/2
    for i in range(n):
        theta = i*delta
        y = r*np.sin(theta)
        x = r*np.cos(theta)
        mags.append(Magnet((x, y ), (abs(x)/r, abs(y)/r, abs(x+y)/2/r)))
    return mags


magnets = n_mags(n)
mags_x = []
mags_y = []
mags_colors = []

for i in magnets:
    mags_x.append(i.pos[0])
    mags_y.append(i.pos[1])
    mags_colors.append(i.color)





# =============================================================================
# Calculation
# =============================================================================

# helper function for the calculation of magentic force
def d_and_d(pos1, pos2):
    d = 0.1
    M = np.sqrt((pos1[0]-pos2[0])**2 + (pos1[1] - pos2[1])**2 + d**2)
    d = ((pos1[0]-pos2[0])/M, (pos1[1] - pos2[1])/M)
    return M, d

# a system of diffrentiatl equations which represent the system
def system(time, pv):

    ball_pos = (pv[0], pv[2])

    xddot = -g * pv[0] / l - f * pv[1]
    yddot = -g * pv[2] / l - f * pv[3]

    for magnet in magnets:
        distance, direction = d_and_d(magnet.pos, ball_pos)
        force = k / (distance**2)
        xddot += direction[0] * force
        yddot += direction[1] * force
    

    return [pv[1], xddot, pv[3], yddot]

# time array for solve_ivp function
dt = 0.01
t = np.arange(start, end, dt)


output = solve_ivp(system, [start, end], [
                   x0, xd0, y0, yd0], method='RK45', t_eval=t)


t_out = output.t

x = output.y[0]
xdot = output.y[1]
y = output.y[2]
ydot = output.y[3]

z = []
for i in range(len(x)):
    r = x[i]**2 + y[i]**2
    z.append(d + l - np.sqrt(l**2 - r))
  


# =============================================================================
# Animation
# =============================================================================

writer  = w(fps=50)

fig = plt.figure()
plt.grid()

# title of Animation
title_str = str(n) + ' Magnet Pendulum: ' + 'x0, y0 = ' + str(x0) + ',' + str(y0)


# bounds of plot
bounds = (max(abs(y0), abs(x0), n/2)+2, -max(abs(y0), abs(x0), n/2)-2)


with writer.saving(fig, 'pendomotion.gif', 100):
    
    for t in range(len(x)-1):
        if 100*t/len(x) % 10 ==0:
            print(100*t/len(x))
            
        p3d = fig.add_subplot(111, projection='3d')
        p3d.set_ylim(bounds[0],bounds[1])
        p3d.set_xlim(bounds[0],bounds[1])
        plt.title(title_str)
        p3d.scatter(mags_x, mags_y, zs=0, c=mags_colors, zorder=2)
        
        line = p3d.plot(x[:t+1], y[:t+1], zs=z[:t+1])
        string = p3d.plot([0,x[t]], [0,y[t]], zs=[l+d,z[t]], color='grey')
        dot = p3d.scatter(x[t], y[t], zs=z[t], c='black', zorder=7)
        
        
        writer.grab_frame() 
        plt.clf()

plt.close(fig)

